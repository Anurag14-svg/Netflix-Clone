{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\netflix-clone\\\\src\\\\Components\\\\Row.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"../axios\";\nimport \"./Row.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchURL,\n  isLarge,\n  getMoviedata,\n  margin,\n  equalLength\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const history = useHistory(); // const [trailerUrl, setTrailerUrl] = useState(\"\");\n  // props.getMovieData(\"This is the value\")\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchURL); // console.log(request)\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchURL]);\n\n  const handleMovieClick = (val, image, desc) => {\n    getMoviedata(val, image, desc);\n    history.push(\"/film\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `row ${margin && \"removeMargin\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `row_posters ${equalLength && \"equallength\"}`,\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        // onClick = {() => handleMovieClick()}\n        onClick: () => handleMovieClick((movie === null || movie === void 0 ? void 0 : movie.title) || (movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.original_name), movie.backdrop_path, movie.overview),\n        className: `row_poster ${isLarge && \"row_posterLarge\"}`,\n        src: `${baseURL}${isLarge ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"6hM/bkUUJqInhH1tYCuGsAACxQQ=\", false, function () {\n  return [useHistory];\n});\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["E:/Projects/netflix-clone/src/Components/Row.jsx"],"names":["React","useState","useEffect","useHistory","axios","baseURL","Row","title","fetchURL","isLarge","getMoviedata","margin","equalLength","movies","setMovies","history","fetchData","request","get","data","results","handleMovieClick","val","image","desc","push","map","movie","name","original_name","backdrop_path","overview","poster_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,WAAP;;AAGA,MAAMC,OAAO,GAAG,sCAAhB;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,OAAnB;AAA4BC,EAAAA,YAA5B;AAAyCC,EAAAA,MAAzC;AAAgDC,EAAAA;AAAhD,CAAb,EAA2E;AAAA;;AACzE,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMc,OAAO,GAAGZ,UAAU,EAA1B,CAFyE,CAGzE;AAEA;;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAec,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUV,QAAV,CAAtB,CADyB,CAEzB;;AACAM,MAAAA,SAAS,CAACG,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GARQ,EAQN,CAACR,QAAD,CARM,CAAT;;AAWA,QAAMa,gBAAgB,GAAG,CAACC,GAAD,EAAOC,KAAP,EAAeC,IAAf,KAAwB;AAE/Cd,IAAAA,YAAY,CAACY,GAAD,EAAOC,KAAP,EAAeC,IAAf,CAAZ;AACAT,IAAAA,OAAO,CAACU,IAAR,CAAa,OAAb;AACD,GAJD;;AAQA,sBACE;AAAK,IAAA,SAAS,EAAG,OAAMd,MAAM,IAAI,cAAe,EAAhD;AAAA,4BACE;AAAA,gBAAKJ;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAG,eAAcK,WAAW,IAAI,aAAc,EAA5D;AAAA,gBACGC,MAAM,CAACa,GAAP,CAAYC,KAAD,iBACV;AACA;AACE,QAAA,OAAO,EAAI,MAAMN,gBAAgB,CAAC,CAAAM,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEpB,KAAP,MAAgBoB,KAAhB,aAAgBA,KAAhB,uBAAgBA,KAAK,CAAEC,IAAvB,MAA+BD,KAA/B,aAA+BA,KAA/B,uBAA+BA,KAAK,CAAEE,aAAtC,CAAD,EAAuDF,KAAK,CAACG,aAA7D,EAA6EH,KAAK,CAACI,QAAnF,CAFnC;AAKE,QAAA,SAAS,EAAG,cAAatB,OAAO,IAAI,iBAAkB,EALxD;AAME,QAAA,GAAG,EAAG,GAAEJ,OAAQ,GACdI,OAAO,GAAGkB,KAAK,CAACK,WAAT,GAAuBL,KAAK,CAACG,aACrC,EARH;AASE,QAAA,GAAG,EAAEH,KAAK,CAACC;AATb,SAGOD,KAAK,CAACM,EAHb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GA/CQ3B,G;UAESH,U;;;KAFTG,G;AAiDT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from \"../axios\";\r\nimport \"./Row.css\";\r\n\r\n\r\nconst baseURL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchURL, isLarge, getMoviedata,margin,equalLength}) {\r\n  const [movies, setMovies] = useState([]);\r\n  const history = useHistory()\r\n  // const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  // props.getMovieData(\"This is the value\")\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchURL);\r\n      // console.log(request)\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchURL]);\r\n\r\n\r\n  const handleMovieClick = (val , image , desc) => {\r\n    \r\n    getMoviedata(val , image , desc)\r\n    history.push(\"/film\")\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className={`row ${margin && \"removeMargin\"}`}>\r\n      <h2>{title}</h2>\r\n      <div className={`row_posters ${equalLength && \"equallength\"}`}>\r\n        {movies.map((movie) => (\r\n          <img\r\n          // onClick = {() => handleMovieClick()}\r\n            onClick = {() => handleMovieClick(movie?.title || movie?.name || movie?.original_name , movie.backdrop_path , movie.overview)}\r\n            key={movie.id}\r\n            \r\n            className={`row_poster ${isLarge && \"row_posterLarge\"}`}\r\n            src={`${baseURL}${\r\n              isLarge ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}